//
//  LogsMonitor.swift
//  Overlog
//
//  Copyright Â© 2017 Netguru Sp. z o.o. All rights reserved.
//

import Foundation

/// ASL module is deprecated and replaced by os_log(3). However, the new implementation
/// lacks a possibility to search for logs in the current run environment (it has yet
/// to be implemented / released to the public by Apple). The decission was made to
/// use the ASL as is it still being supported.
import asl

/// A class to monitor the logs printed in the console
final public class LogsMonitor {

    /// The ASL client associated with the receiver
    fileprivate(set) var aslClient: aslclient
    fileprivate(set) var fileURL: String?

    public init() {
        self.aslClient = asl_open(ProcessInfo.processInfo.processName, nil, 0x00000001)
    }
    
    /// Start monitoring for new data in standard and error outputs
    public func monitorConsoleLogs() {
        let pipe = Pipe()
        let handle = pipe.fileHandleForReading
        dup2(pipe.fileHandleForWriting.fileDescriptor, fileno(stderr))
        dup2(pipe.fileHandleForWriting.fileDescriptor, fileno(stdout))
        
        NotificationCenter.default.addObserver(self, selector: #selector(dataAvailable(notification:)), name: NSNotification.Name.NSFileHandleDataAvailable, object: nil)
        handle.waitForDataInBackgroundAndNotify()
    }
    
    /// Parse available output data
    @objc public func dataAvailable(notification: Notification) {
        if let fileHandle = notification.object as? FileHandle {

            if let /*parsedData*/_ = NSString(data: fileHandle.availableData, encoding: String.Encoding.utf8.rawValue) {
                DispatchQueue.main.async {
                    /// Send parsed data to the delegate
                }
            }

            fileHandle.waitForDataInBackgroundAndNotify()
        }
    }

    /// Perform a one-time scan for all logs generated by the host app
    public func scanForSystemLogs() -> [Log] {

        /// Searching for all logs
        let query = asl_new(UInt32(ASL_TYPE_QUERY))
        let results = asl_search(aslClient, query)

        var logsArray = [Log]()
        var record = asl_next(results)

        /// Iterating for logs read by asl_search command
        while record != nil {

            var logDictionary = [String: String]()

            var i = UInt32(0)
            var key = asl_key(record, i)
            while key != nil {
                let keyStr = String(cString: key!)
                if let val = asl_get(record, keyStr) {
                    let valString = String(cString: val)
                    logDictionary[keyStr] = valString
                }
                i += 1
                key = asl_key(record, i)
            }

            let log = Log(raw: logDictionary)
            logsArray.append(log)

            record = asl_next(results)
        }

        asl_release(results)
        return logsArray
    }

    deinit {
        asl_close(aslClient)
        let fileManager : FileManager = FileManager.default
        if let url = fileURL {
            do {
                try fileManager.removeItem(atPath: url)
            } catch let error as NSError {
                print("Error: \(error.domain)")
            }
        }
    }

}
